{"version":3,"sources":["app/components/http-service/http-service.js","app/components/card/Card.jsx","app/components/catalog/Catalog.jsx","app/App.jsx","serviceWorker.js","index.js"],"names":["HTTPService","Object","classCallCheck","this","createClass","key","value","url","successCallBack","errorCallBack","xhr","XMLHttpRequest","open","send","onreadystatechange","readyState","status","parseData","JSON","parse","response","data","setRequestHeader","stringify","Card","props","name","description","imgUrl","_id","price","react","id","className","src","alt","Catalog","_React$Component","_this","possibleConstructorReturn","getPrototypeOf","call","httpService","state","products","inherits","_this2","get","map","product","setState","oldState","assign","e","console","log","i","Card_Card","React","App","react_default","a","createElement","Catalog_Catalog","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31e400de.chunk.js","sourcesContent":["export class HTTPService {\r\n    get(url, successCallBack, errorCallBack) {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('GET', url);\r\n        xhr.send();\r\n\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n                    const parseData = JSON.parse(xhr.response);\r\n                    successCallBack(parseData);\r\n                } else {\r\n                    errorCallBack(xhr);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    post(url, data, successCallBack, errorCallBack) {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('POST', url);\r\n\r\n        xhr.setRequestHeader('content-type', 'application/json');\r\n        xhr.send((typeof data !== 'string') ? JSON.stringify(data) : data);\r\n\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n                    const parseData = JSON.parse(xhr.response);\r\n                    successCallBack(parseData);\r\n                } else {\r\n                    errorCallBack(xhr);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    delete(url, successCallBack, errorCallBack) {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('DELETE', url);\r\n\r\n        xhr.send();\r\n\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n                    const parseData = JSON.parse(xhr.response);\r\n                    successCallBack(parseData);\r\n                } else {\r\n                    errorCallBack(xhr);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport './Card.scss';\r\n\r\nexport const Card = (props) => {\r\n    const { name, description, imgUrl, price, _id } = props;\r\n    return <div id={_id} className=\"card\">\r\n        <div className=\"card__image\">\r\n            <img src={imgUrl} alt={name} />\r\n        </div>\r\n        <div className=\"card__title\">{name}</div>\r\n        <div className=\"card__description\">{description}</div>\r\n    </div>\r\n}","import * as React from 'react';\r\nimport './Catalog.scss';\r\nimport { HTTPService } from \"../http-service/http-service\";\r\nimport { Card } from '../card/Card.jsx';\r\n\r\nexport class Catalog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.httpService = new HTTPService();\r\n        this.state = {\r\n            products: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.httpService.get('http://localhost:4002/api/v1/phones', (products) => {\r\n            products = products.map((product) => {\r\n                product.imgUrl = 'http://localhost:4002/api/v1/' + product.imgUrl;\r\n                return product;\r\n            })\r\n            this.setState((oldState) => Object.assign({}, oldState, { products }));\r\n        }, (e) => { \r\n            console.log(e); //если все плохо, то приходит какой-то callback\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"page-content\">\r\n            {this.state.products.map((product, i) => <Card {...product} key={i}/>)}\r\n        </div>\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { Catalog } from './components/catalog/Catalog.jsx'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Catalog />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}