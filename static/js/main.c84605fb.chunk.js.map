{"version":3,"sources":["app/components/global-sidebar/GlobalSidebar.jsx","app/components/http-service/http-service.js","app/components/card/Card.jsx","app/components/catalog/Catalog.jsx","app/components/footer/Footer.jsx","app/App.jsx","serviceWorker.js","index.js"],"names":["GlobalSidebar","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleMenu","bind","assertThisInitialized","state","isOpened","inherits","createClass","key","value","setState","oldState","newState","assign","listLink","props","links","map","link","i","react","href","className","title","classNames","classToggleNames","onClick","React","HTTPService","url","successCallBack","errorCallBack","xhr","XMLHttpRequest","open","send","onreadystatechange","readyState","status","parseData","JSON","parse","response","data","setRequestHeader","stringify","Card","getDetails","addToWishlist","isCardFocus","isAddToWishlistChecked","arrayActionButtons","_this$props","name","description","imgUrl","price","_id","cardImage","backgroundImage","concat","classNamesForCardContent","classNamesForButtonAddToWishlist","setTimeout","actionButtons","button","id","style","aria-label","aria-hidden","aria-pressed","Catalog","httpService","products","_this2","get","product","e","console","log","Card_Card","Footer","App","sidebar_links","react_default","a","createElement","GlobalSidebar_GlobalSidebar","Catalog_Catalog","Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c84605fb.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport './GlobalSidebar.scss';\r\n\r\nexport class GlobalSidebar extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.toggleMenu = this.toggleMenu.bind(this);\r\n        this.state = {\r\n            isOpened: false,\r\n        };\r\n\r\n        /*\r\n        Запись объекта не в state\r\n        this.menu = [\r\n            {\r\n                title: 'Mac',\r\n                href: 'https://www.apple.com/mac/',\r\n            },\r\n            {\r\n                title: 'iPhone',\r\n                href: 'https://www.apple.com/iphone/',\r\n            },\r\n            {\r\n                title: 'Watch',\r\n                href: 'https://www.apple.com/watch/',\r\n            },\r\n            {\r\n                title: 'Music',\r\n                href: 'https://www.apple.com/music/',\r\n            },\r\n            {\r\n                title: 'Support',\r\n                href: 'https://support.apple.com/',\r\n            },\r\n            {\r\n                title: 'Users comments',\r\n                href: '/comment_page.html',\r\n            },\r\n        ];\r\n        */\r\n    }\r\n\r\n    toggleMenu() {\r\n        this.setState((oldState) => {\r\n            const newState = Object.assign({}, oldState);\r\n            newState.isOpened = !oldState.isOpened;\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const listLink = this.props.links.map((link, i) => {\r\n            return <a key={i} href={link.href} className=\"sidebar__link\">\r\n                {link.title}\r\n            </a>\r\n        });\r\n\r\n        let classNames = 'sidebar ';\r\n        let classToggleNames = 'sidebar__toggle ';\r\n\r\n        if (this.state.isOpened) {\r\n            classNames += 'sidebar_opened';\r\n            classToggleNames += 'sidebar__toggle_opened';\r\n        }\r\n\r\n        return <aside className={classNames}>\r\n            <div className={classToggleNames} onClick={this.toggleMenu}>\r\n                <div className=\"toggle__row\"></div>\r\n                <div className=\"toggle__row\"></div>\r\n            </div>\r\n            <div className=\"sidebar__items\">\r\n                {listLink}\r\n            </div>\r\n        </aside>\r\n    }\r\n}","export class HTTPService {\r\n    get(url, successCallBack, errorCallBack) {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('GET', url);\r\n        xhr.send();\r\n\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n                    const parseData = JSON.parse(xhr.response);\r\n                    successCallBack(parseData);\r\n                } else {\r\n                    errorCallBack(xhr);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    post(url, data, successCallBack, errorCallBack) {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('POST', url);\r\n\r\n        xhr.setRequestHeader('content-type', 'application/json');\r\n        xhr.send((typeof data !== 'string') ? JSON.stringify(data) : data);\r\n\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n                    const parseData = JSON.parse(xhr.response);\r\n                    successCallBack(parseData);\r\n                } else {\r\n                    errorCallBack(xhr);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    delete(url, successCallBack, errorCallBack) {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('DELETE', url);\r\n\r\n        xhr.send();\r\n\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n                    const parseData = JSON.parse(xhr.response);\r\n                    successCallBack(parseData);\r\n                } else {\r\n                    errorCallBack(xhr);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport './Card.scss';\r\n\r\nexport class Card extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.getDetails = this.getDetails.bind(this);\r\n        this.addToWishlist = this.addToWishlist.bind(this);\r\n        this.state = {\r\n            isCardFocus: false,\r\n            isAddToWishlistChecked: false,\r\n            arrayActionButtons: [\r\n                {\r\n                    title: 'view more',\r\n                    href: ''\r\n                },\r\n                {\r\n                    title: 'buy',\r\n                    href: ''\r\n                }\r\n            ],\r\n        }\r\n    }\r\n\r\n    getDetails() {\r\n        this.setState((oldState) => {\r\n            const newState = Object.assign({}, oldState);\r\n            newState.isCardFocus = !oldState.isCardFocus;\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    addToWishlist() {\r\n        this.setState((oldState) => {\r\n            const newState = Object.assign({}, oldState);\r\n            newState.isAddToWishlistChecked = !oldState.isAddToWishlistChecked;\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { name, description, imgUrl, price, _id } = this.props;\r\n\r\n        const cardImage = {\r\n            backgroundImage: `url(${imgUrl})`\r\n        }\r\n\r\n        let classNamesForCardContent = \"card__content mdc-card__primary-action mdc-ripple-upgraded \"\r\n        let classNamesForButtonAddToWishlist = \"action__add-to-wishlist mdc-icon-button \";\r\n\r\n        if (this.state.isCardFocus) {\r\n            classNamesForCardContent += \"mdc-ripple-upgraded--background-focused mdc-ripple-upgraded--foreground-activation\";\r\n            setTimeout(this.getDetails, 250);\r\n        }\r\n\r\n        if (this.state.isAddToWishlistChecked) {\r\n            classNamesForButtonAddToWishlist += \"mdc-icon-button--on\";\r\n        }\r\n\r\n        const actionButtons = this.state.arrayActionButtons.map((button, i) => {\r\n            return <button key={i} className=\"action__btn mdc-button\">\r\n                {button.title}\r\n            </button>\r\n        });\r\n\r\n        return <div id={_id} className=\"card\">\r\n            <div className={classNamesForCardContent} onClick={this.getDetails}>\r\n                <div className=\"card__image\" style={cardImage}></div>\r\n                <div className=\"card__text\">\r\n                    <h2 className=\"card__title\">{name}</h2>\r\n                    <div className=\"card__price\">{price}</div>\r\n                    <div className=\"card__description\">{description}</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"card__button\">\r\n                <div className=\"main-action\">\r\n                    {actionButtons}\r\n                </div>\r\n                <button className={classNamesForButtonAddToWishlist}\r\n                    title=\"Add to wishlist\"\r\n                    aria-label=\"Add to wishlist\"\r\n                    aria-hidden=\"true\"\r\n                    aria-pressed=\"false\"\r\n                    onClick={this.addToWishlist}>\r\n                    <i className=\"material-icons mdc-icon-button__icon mdc-icon-button__icon--on\">favorite</i>\r\n                    <i className=\"material-icons mdc-icon-button__icon\">favorite_border</i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    }\r\n}","import * as React from 'react';\r\nimport './Catalog.scss';\r\nimport { HTTPService } from \"../http-service/http-service\";\r\nimport { Card } from '../card/Card.jsx';\r\n\r\nexport class Catalog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.httpService = new HTTPService();\r\n        this.state = {\r\n            products: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.httpService.get('http://localhost:4002/api/v1/phones', (products) => {\r\n            products = products.map((product) => {\r\n                product.imgUrl = 'http://localhost:4002/api/v1/' + product.imgUrl;\r\n                return product;\r\n            })\r\n            this.setState((oldState) => Object.assign({}, oldState, { products }));\r\n        }, (e) => {\r\n            console.log(e); //если все плохо, то приходит какой-то callback\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"catalog-content\">\r\n            {this.state.products.map((product, i) => <Card {...product} key={i} />)}\r\n        </div>\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport './Footer.scss';\r\n\r\nexport const Footer = () => {\r\n    return <div className=\"footer\">\r\n        <div className=\"logo\">\r\n            <div className=\"logo__icon\"></div>\r\n            <div className=\"logo__title\"></div>\r\n        </div>\r\n        <div className=\"footer__site-author\">\r\n            Create by Alina Moskalenko\r\n        </div>\r\n    </div>\r\n}","import React, { Component } from 'react';\nimport './App.scss';\nimport { GlobalSidebar } from './components/global-sidebar/GlobalSidebar.jsx';\nimport { Catalog } from './components/catalog/Catalog.jsx';\nimport { Footer } from './components/footer/Footer.jsx';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      sidebar_links: [\n        {\n          title: 'Mac',\n          href: 'https://www.apple.com/mac/',\n        },\n        {\n          title: 'iPhone',\n          href: 'https://www.apple.com/iphone/',\n        },\n        {\n          title: 'Watch',\n          href: 'https://www.apple.com/watch/',\n        },\n        {\n          title: 'Music',\n          href: 'https://www.apple.com/music/',\n        },\n        {\n          title: 'Support',\n          href: 'https://support.apple.com/',\n        },\n      ]\n    };\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App__header\"></header>\n        <main className=\"App__main\">\n          <div className=\"App__aside\">\n            <GlobalSidebar links={this.state.sidebar_links} />\n          </div>\n          <section className=\"App__section\">\n            <Catalog />\n          </section>\n        </main>\n        <footer className=\"App__footer\">\n          <Footer />\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}